# Moving average filter 2, no reduction, smooth2()


In this file,  
x is an input list with length = len(x).  
n is the number of points being averaged each time.  
y is an output list with length = len(x).  
The length is not reduced.  
I think <b>moving average.ipynb</b> might be better than this because noise at beginning and end is reduced.

# Required: n >= 3 and is odd
def smooth2(x,n):
    y = [0] * len(x)
    if len(x)>=n:
        for i in range((n-1)//2): # for i in range((3-1)//2), range(1)
            y[i]=x[i] # Only for i = 0, y[0] & x[0]
            # print('i=',i,y[i])
            y[len(x)-1-i]=x[len(x)-1-i] # for y[7] & x[7] only
            # print('i=',i,y[len(x)-1-i])
        for j in range(len(x) - n + 1): # range(8-3+1) or range(6), j=0,1,2,3,4,5
            y[(n-1)//2 + j]=sum(x[0+j:n+j])/n # y[1] to y[6]
            # print('j=',j,y[(n-1)//2 + j])
    else:
        y=x
    return y

x = [0, 1, 3, 3, 4, 5, 6, 7]
n = 3
y = smooth(x,n)
z = smooth(y,n)
print('x = ', ['{0:0.2f}'.format(k) for k in x])  
print('y = ', ['{0:0.2f}'.format(k) for k in y]) 
print('z = ', ['{0:0.2f}'.format(k) for k in z])
>> x =  ['0.00', '1.00', '3.00', '3.00', '4.00', '5.00', '6.00', '7.00']
>> y =  ['0.00', '1.33', '2.33', '3.33', '4.00', '5.00', '6.00', '7.00']
>> z =  ['0.00', '1.22', '2.33', '3.22', '4.11', '5.00', '6.00', '7.00']

x = [0, 1, 4]
n = 3
y = smooth(x,n)
y = y[0:len(y)-3].append(smooth(x[len(x)-2:len(x)][(n-1)//2:n],n))
print('x =', x)
print('y =', y)
>> x = [0, 1, 4]
>> y = None

x = [0, 1, 4, 7]
n = 3
y = smooth(x,n)
y = smooth(x[len(x)-3:len(x)],n)
print('x = ', ['{0:0.2f}'.format(k) for k in x])  
print('y = ', ['{0:0.2f}'.format(k) for k in y])
>> x =  ['0.00', '1.00', '4.00', '7.00']
>> y =  ['1.00', '4.00', '7.00']



